# -*- coding: utf-8 -*-
"""Google PlayStore Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NiwQUkyox6EfeQZKaEn4PFjLGt8G_viG
"""





import pandas as pd

df = pd.read_csv(r'/content/googleplaystore.csv')

print('Display the Data : ')
df

df.tail()

df.shape

df.columns

df.dtypes

df.describe()

#insights >> Max rating is wrong

df.describe(include='all')

#Checking for Duplicate Value
df[df.duplicated()]

#Finding the total number of duplicates
df.duplicated().sum()

#Removing Duplicated Value
x = df.drop_duplicates()

x

x.duplicated().sum()

x.columns

x.Rating

#Insights >> This Data is Continuos

df['Reviews'].dtype

#Insights >> Presence of one or many values in String converts the enitre 'Review' into a Object-Type Column

#Finding those values

x.Reviews.str.isnumeric()

x[x.Reviews.str.isnumeric()]

#Isnights >> We can see that since dataset 'x' had 10358 original columns and the total values in 'Reviews' that are numeric are 10357,
#We can say that there exists one column that contains a literal character in the value place

#Finding the string values

x[~x.Reviews.str.isnumeric()]

type(x.Reviews.str)

x.Reviews.str

x = x.drop(x[x['Reviews'] == '3.0M'].index)
x[~x.Reviews.str.isnumeric()]

x

x['Reviews'].astype(int)

import seaborn as sns

#Dealing with Null Values
#Taking a different approach
x['Size'].unique()

x['Size'] = x['Size'].str.replace('M', '').astype(float) * 1000000.0

x['Size']

x['Size'] = x['Size'].str.replace("k","000")

x['Size']

x[~x.Size.str.isnumeric()]

x['Size'].dtype

x['Size']

x['Installs']

x['Installs'] = x['Installs'].str.replace("+","").str.replace(",","")

x['Installs'] = x['Installs'].astype(int)

x['Price'].unique()

x['Price'] = x['Price'].str.replace('$','')
x['Price'].unique()

x['Price'] = x['Price'].astype('float')

x['Price']

x['Price'].unique()

x

categorical_x = [feature for feature in x.columns if x[feature].dtype == 'O']
categorical_x

numerical_x = [feature for feature in x.columns if x[feature].dtype != 'O']
numerical_x

x['Type']

x['Type'].value_counts(normalize=True)

import seaborn as sns

sns.countplot(x['Type'])

sns.countplot(x['Content Rating'])

sns.histplot(x['Price'])

sns.histplot(x['Rating'])

x['Category']

x['Category'].value_counts().plot.pie(autopct='%1.1f%%', figsize=(30, 30))

x['Category'].value_counts()[:10]

x.groupby(['Category'])['Installs'].sum().sort_values(ascending=False)

x1 = x.groupby(['Category','Type'])['Installs'].sum().sort_values(ascending=True)

x1[x1.index.get_level_values('Category') == 'GAME']

#In-depth exploration

categorical_installation = x.groupby('Category')['Installs'].sum()

print(categorical_installation)

top_10_App_Categories =  categorical_installation.sort_values(ascending=False).head(10)

top_10_App_Categories

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
top_10_App_Categories.plot(kind='bar', color='skyblue')
plt.title('Top 10 Most Popular App Categories by Installs')
plt.xlabel('Categories')
plt.ylabel('Total Installs')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

Bottom_10_App_Categories =  categorical_installation.sort_values(ascending=True).head(10)

Bottom_10_App_Categories

plt.figure(figsize=(10, 6))
Bottom_10_App_Categories.plot(kind='bar', color='skyblue')
plt.title('Top 10 Most Popular App Categories by Installs')
plt.xlabel('Categories')
plt.ylabel('Total Installs')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()



"""Average Rating per Category"""

average_rating = x.groupby('Category')['Rating'].mean()

top_average_ratings = average_rating.sort_values(ascending=False).head(10)

top_average_ratings

bottom_average_ratings = average_rating.sort_values(ascending=True).head(10)

bottom_average_ratings



"""Comparison of Ratings of Apps in A Particular Category

"""

x['Category'].unique()

import pandas as pd
import matplotlib.pyplot as plt

# Specify the category you want to compare
category = 'ART_AND_DESIGN'

# Filter the dataset for apps in the specified category
xdf = x[x['Category'] == category]

# Get unique app names
unique_apps = xdf['App'].unique()

# Define color for all apps
color = 'deepskyblue'

# Plotting
plt.figure(figsize=(25, 16))

# Create a scatter plot to compare ratings of apps in the specified category
for i, app in enumerate(unique_apps):
    app_data = xdf[xdf['App'] == app]
    plt.scatter(app_data['Rating'], [i] * len(app_data), color=color, alpha=0.7)

plt.title(f'Comparison of Ratings of Apps in {category} Category')
plt.xlabel('Rating')
plt.ylabel('App')

# Set y-axis ticks and labels
plt.yticks(range(len(unique_apps)), unique_apps)

plt.grid(True)
plt.tight_layout()
plt.show()

x.Category.unique()

import pandas as pd
import matplotlib.pyplot as plt

# Group by Category and sum the Installs to get total installations per category
category_installs = x.groupby('Category')['Installs'].sum().sort_values(ascending=False)

# Plotting installations per category
plt.figure(figsize=(12, 8))
category_installs.plot(kind='bar', color='skyblue')
plt.title('Total Installations per Category')
plt.xlabel('Category')
plt.ylabel('Total Installations')
plt.xticks(rotation=90)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Get the name of the most popular category
most_popular_category = category_installs.idxmax()
print("Most Popular Category:", most_popular_category)

# Filter the dataset for the most popular category
most_popular_category_df = x[x['Category'] == most_popular_category]

# Group by App and sum the Installs to get total installations per app
app_installs = most_popular_category_df.groupby('App')['Installs'].sum().sort_values(ascending=False)

# Plotting installations per app in the most popular category
plt.figure(figsize=(12, 8))
app_installs.head(10).plot(kind='bar', color='salmon')
plt.title(f'Top 10 Most Installed Apps in {most_popular_category} Category')
plt.xlabel('App')
plt.ylabel('Total Installations')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Group by Category and sum the Installs to get total installations per category
category_installs = x.groupby('Category')['Installs'].sum().sort_values()

# Plotting installations per category for the top 10 categories
plt.figure(figsize=(12, 8))
category_installs.tail(10).plot(kind='bar', color='skyblue')
plt.title('Top 10 Categories by Total Installations')
plt.xlabel('Category')
plt.ylabel('Total Installations')
plt.xticks(rotation=90)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Plotting installations per category for the bottom 10 categories
plt.figure(figsize=(12, 8))
category_installs.head(10).plot(kind='bar', color='salmon')
plt.title('Bottom 10 Categories by Total Installations')
plt.xlabel('Category')
plt.ylabel('Total Installations')
plt.xticks(rotation=90)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Group by App and sum the Installs to get total installations per app
app_installs = x.groupby('App')['Installs'].sum().sort_values()

# Plotting installations per app for the top 10 apps
plt.figure(figsize=(12, 8))
app_installs.tail(10).plot(kind='bar', color='skyblue')
plt.title('Top 10 Apps by Total Installations')
plt.xlabel('App')
plt.ylabel('Total Installations')
plt.xticks(rotation=90)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Plotting installations per app for the bottom 10 apps
plt.figure(figsize=(12, 8))
app_installs.head(10).plot(kind='bar', color='salmon')
plt.title('Bottom 10 Apps by Total Installations')
plt.xlabel('App')
plt.ylabel('Total Installations')
plt.xticks(rotation=90)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Filter out rows with missing values in 'Size' column
x_cleaned = x.dropna(subset=['Size'])

# Define the bins for the histogram
bins = [i * 1000000 for i in range(0, 11)]  # From 0 to 100M with intervals of 10M

# Group the data by 'Category' and plot histograms for 'Size' within each category
plt.figure(figsize=(12, 8))
for category, data in x_cleaned.groupby('Category'):
    plt.hist(data['Size'], bins=bins, alpha=0.7, label=category, density=True)

plt.title('Distribution of App Sizes by Category')
plt.xlabel('App Size (in bytes)')
plt.ylabel('Density')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Group by Category and select the top 10 apps in each category based on size
top_10_apps_per_category = x.groupby('Category', as_index=False).apply(lambda x: x.nlargest(10, 'Size'))

# Define the bins for the histogram
bins = [i * 10000000 for i in range(0, 11)]  # From 0 to 100M with intervals of 10M

# Plot histograms for each category
for category, data in top_10_apps_per_category.groupby('Category'):
    plt.figure(figsize=(8, 6))
    plt.hist(data['Size'], bins=bins, alpha=0.7, color='skyblue')
    plt.title(f'Distribution of App Sizes for Top 10 Apps in {category}')
    plt.xlabel('App Size (in bytes)')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

"""Trend of app ratings over time

"""

import matplotlib.pyplot as plt

# Get the top 10 most popular apps based on installations
most_popular_apps = x.groupby('App')['Installs'].sum().nlargest(10).index.tolist()

# Filter the dataset for the most popular apps
popular_apps_data = x[x['App'].isin(most_popular_apps)]

# Plot individual data points for each 'Last Updated' date
for app in most_popular_apps:
    app_data = popular_apps_data[popular_apps_data['App'] == app]
    plt.scatter(app_data['Last Updated'], app_data['Rating'], label=app)

# Plot all data points for 'Last Updated' date
plt.scatter(x['Last Updated'], x['Rating'], label='All Apps', alpha=0.5)

# Set labels and title
plt.xlabel('Last Updated')
plt.ylabel('Rating')
plt.title('Trend of App Ratings Over Time for Most Popular Apps')

# Show legend
plt.legend()

# Show the plot
plt.show()

x['Last Updated'].describe()

